@page "/productform/{id:int}"


@using ProjectEshop.Web.ApiClients
@using Radzen.Blazor
@using System.Drawing
@using System.IO
@inject IProjectEshopApiClients ApiClient
@inject NavigationManager NavManager


<h3>Product Create</h3>



<h3>Name</h3>
<RadzenTextBox Placeholder="" @bind-Value="model.ProductName" />
<h3>Description</h3>
<RadzenTextBox Placeholder="" @bind-Value="model.ProductDescription" />
<h3>Category</h3>
<RadzenDropDown AllowClear="true"
                Data=@Categories
                TextProperty="CategoryName"
                ValueProperty="Id"
                @bind-Value=@model.IdCategory />
<h3>Manufacturer</h3>
<RadzenDropDown AllowClear="true"
                Data=@Manufacturers
                TextProperty="ManufacturerName"
                ValueProperty="Id"
                @bind-Value=@model.IdManufacturer />
<h3>Weight</h3>
<RadzenNumeric Placeholder="" @bind-Value="model.ProductWeight" />
<h3>Price</h3>
<RadzenNumeric Placeholder="" @bind-Value="model.ProductPrice" />
<h3>In stock</h3>
<RadzenNumeric Placeholder="" @bind-Value="model.ProductQuantityInStock" />

<h3>Logo</h3>
<InputFile OnChange="@SingleUpload" />
<img style="width=50px;" src="@Img" id="imageViever">

<br />
<br />
<br />
<br />
<RadzenButton style="margin: 0 1rem 1rem 0" Click=@(args => Submit()) Text="Save" ButtonStyle="ButtonStyle.Primary" />


@code {
    private ProductDto model { get; set; }
    int progress;
    string info;

    [Parameter]
    public int Id { get; set; }
    public string Img { get; set; }

    RadzenUpload upload { get; set; }

    protected async Task Submit()
    {
        model.ProductImages = new List<ProductImageDto>();
        if (!String.IsNullOrEmpty(Img))
        {
            var imgSplit = Img.Split(',')[1];
            var imgBytes = Convert.FromBase64String(imgSplit);
            model.ProductImages.Add(new ProductImageDto { Picture = imgBytes });
        }


        if (model.Id > 0)
        {
            await ApiClient.ProductEditAsync(model);
        }
        else
        {
            await ApiClient.ProductCreateAsync(model);
        }
        NavManager.NavigateTo($"/ProductList");
    }

    private async Task SingleUpload(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();
        Img = Hex2Base64(bytes);
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        this.info = $"% '{name}' / {args.Loaded} of {args.Total} bytes.";
        this.progress = args.Progress;

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                using (var ms = new MemoryStream())
                {
                    ImageToByteArray(Image.FromFile(file.Name));
                    Img = Hex2Base64(ms.ToArray());
                }
            }
        }
    }

    protected string Hex2Base64(byte[] input)
    {
        var base64 = Convert.ToBase64String(input);
        return String.Format("data:image/gif;base64,{0}", base64);
    }

    public byte[] ImageToByteArray(System.Drawing.Image imageIn)
    {
        using (var ms = new MemoryStream())
        {
            imageIn.Save(ms, imageIn.RawFormat);
            return ms.ToArray();
        }
    }

    private ICollection<CategoryDto> Categories = new List<CategoryDto>();
    private ICollection<ManufacturerDto> Manufacturers = new List<ManufacturerDto>();

    protected override async Task OnInitializedAsync()
    {


        if (Id > 0)
        {
            model = ApiClient.ProductGetDetailAsync(Id).Result;
        }
        else
        {
            model = new ProductDto();
        }

        var imgSrc = "";

        if (model.ProductImages?.Count > 0)
        {
            imgSrc = Hex2Base64(model.ProductImages?.FirstOrDefault().Picture);
        }

        Img = imgSrc;

        Categories = await ApiClient.CategoryGetAllAsync();
        Manufacturers = await ApiClient.ManufacturerGetAllAsync();
    }
}
